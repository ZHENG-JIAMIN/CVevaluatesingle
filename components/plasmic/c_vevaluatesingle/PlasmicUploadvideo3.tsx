// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rXnSEQkb737qyHw1C9ru8K
// Component: -Eu6Snr_YzCF

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Video } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: rXnSEQkb737qyHw1C9ru8K/projectcss
import sty from "./PlasmicUploadvideo3.module.css"; // plasmic-import: -Eu6Snr_YzCF/css

import 上传视频svg2Icon from "./icons/PlasmicIcon__\u4E0A\u4F20\u89C6\u9891svg2"; // plasmic-import: ZJxHRxAiqpZg/icon

createPlasmicElementProxy;

export type PlasmicUploadvideo3__VariantMembers = {};
export type PlasmicUploadvideo3__VariantsArgs = {};
type VariantPropType = keyof PlasmicUploadvideo3__VariantsArgs;
export const PlasmicUploadvideo3__VariantProps = new Array<VariantPropType>();

export type PlasmicUploadvideo3__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicUploadvideo3__ArgsType;
export const PlasmicUploadvideo3__ArgProps = new Array<ArgPropType>(
  "children",
  "slot"
);

export type PlasmicUploadvideo3__OverridesType = {
  root?: Flex__<"div">;
  upload2?: Flex__<typeof UploadWrapper>;
  button?: Flex__<typeof AntdButton>;
  svg?: Flex__<"svg">;
};

export interface DefaultUploadvideo3Props {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicUploadvideo3__RenderFunc(props: {
  variants: PlasmicUploadvideo3__VariantsArgs;
  args: PlasmicUploadvideo3__ArgsType;
  overrides: PlasmicUploadvideo3__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "upload2.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__rQdK5)}>
        {renderPlasmicSlot({
          defaultContents: "1.\u5750\u59ff",
          value: args.children,
          className: classNames(sty.slotTargetChildren)
        })}
      </div>
      <UploadWrapper
        data-plasmic-name={"upload2"}
        data-plasmic-override={overrides.upload2}
        accept={"image/*"}
        className={classNames("__wab_instance", sty.upload2)}
        files={generateStateValueProp($state, ["upload2", "files"])}
        listType={"picture"}
        onFilesChange={generateStateOnChangeProp($state, ["upload2", "files"])}
        showUploadList={true}
      >
        <AntdButton
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          className={classNames("__wab_instance", sty.button)}
        >
          <上传视频svg2Icon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        </AntdButton>
      </UploadWrapper>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__lEro
        )}
      >
        {"\u89c6\u9891\u62cd\u6444\u6559\u5b66"}
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__pZe
        )}
      >
        {"\u70b9\u51fb\u4e0a\u4f20\u89c6\u9891"}
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__cnNyQ)}>
        {renderPlasmicSlot({
          defaultContents: (
            <Video
              className={classNames("__wab_instance", sty.htmlVideo__wejUb)}
              controls={true}
              src={
                "https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.webm"
              }
            />
          ),

          value: args.slot
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "upload2", "button", "svg"],
  upload2: ["upload2", "button", "svg"],
  button: ["button", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  upload2: typeof UploadWrapper;
  button: typeof AntdButton;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUploadvideo3__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUploadvideo3__VariantsArgs;
    args?: PlasmicUploadvideo3__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUploadvideo3__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicUploadvideo3__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUploadvideo3__ArgProps,
          internalVariantPropNames: PlasmicUploadvideo3__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUploadvideo3__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUploadvideo3";
  } else {
    func.displayName = `PlasmicUploadvideo3.${nodeName}`;
  }
  return func;
}

export const PlasmicUploadvideo3 = Object.assign(
  // Top-level PlasmicUploadvideo3 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    upload2: makeNodeComponent("upload2"),
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicUploadvideo3
    internalVariantProps: PlasmicUploadvideo3__VariantProps,
    internalArgProps: PlasmicUploadvideo3__ArgProps
  }
);

export default PlasmicUploadvideo3;
/* prettier-ignore-end */
