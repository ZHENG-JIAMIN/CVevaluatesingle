// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rXnSEQkb737qyHw1C9ru8K
// Component: MW1oDPFzncsK

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { AntdTabs } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { AntdTabItem } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { AntdDrawer } from "@plasmicpkgs/antd5/skinny/registerDrawer";
import { AntdPagination } from "@plasmicpkgs/antd5/skinny/registerPagination";
import { paginationHelpers as AntdPagination_Helpers } from "@plasmicpkgs/antd5/skinny/registerPagination";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: rXnSEQkb737qyHw1C9ru8K/projectcss
import sty from "./PlasmicNewPage.module.css"; // plasmic-import: MW1oDPFzncsK/css

createPlasmicElementProxy;

export type PlasmicNewPage__VariantMembers = {};
export type PlasmicNewPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewPage__VariantsArgs;
export const PlasmicNewPage__VariantProps = new Array<VariantPropType>();

export type PlasmicNewPage__ArgsType = {};
type ArgPropType = keyof PlasmicNewPage__ArgsType;
export const PlasmicNewPage__ArgProps = new Array<ArgPropType>();

export type PlasmicNewPage__OverridesType = {
  root?: Flex__<"div">;
  table?: Flex__<typeof RichTable>;
  tabs?: Flex__<typeof AntdTabs>;
  img?: Flex__<typeof PlasmicImg__>;
  drawer?: Flex__<typeof AntdDrawer>;
  drawer2?: Flex__<typeof AntdDrawer>;
  pagination?: Flex__<typeof AntdPagination>;
};

export interface DefaultNewPageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewPage__RenderFunc(props: {
  variants: PlasmicNewPage__VariantsArgs;
  args: PlasmicNewPage__ArgsType;
  overrides: PlasmicNewPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "pagination.currentPage",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        onMutate: generateOnMutateForSpec("currentPage", AntdPagination_Helpers)
      },
      {
        path: "pagination.pageSize",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 10,

        onMutate: generateOnMutateForSpec("pageSize", AntdPagination_Helpers)
      },
      {
        path: "pagination.startIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("startIndex", AntdPagination_Helpers)
      },
      {
        path: "pagination.endIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("endIndex", AntdPagination_Helpers)
      },
      {
        path: "drawer.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "drawer2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "tabs.activeKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "tXp8HNyf1FW93M6WyUxoRC",
        opId: "c2061021-1c2b-4e1c-b1b5-221e881d315e",
        userArgs: {},
        cacheKey: `plasmic.$.c2061021-1c2b-4e1c-b1b5-221e881d315e.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          {(() => {
            const child$Props = {
              canSelectRows: "none",
              className: classNames("__wab_instance", sty.table),
              data: (() => {
                try {
                  return $queries.query.data.response.results[0].data;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return (() => {
                      try {
                        return $queries.query;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })();
                  }
                  throw e;
                }
              })(),
              defaultSize: "large",
              fields: (() => {
                const __composite = [
                  { key: "id", fieldId: "id", title: null },
                  {
                    key: "knowledge_class",
                    fieldId: "knowledge_class",
                    title: null,
                    isHidden: null,
                    expr: null
                  },
                  { key: "section", fieldId: "section", title: null },
                  { key: "title", fieldId: "title", title: null },
                  { key: "items", fieldId: "items", title: null }
                ];
                __composite["0"]["title"] = "ID";
                __composite["1"]["title"] = "\u7c7b\u522b";
                __composite["1"]["isHidden"] = false;
                __composite["1"]["expr"] = (currentItem, currentValue) => {
                  return (() => {
                    let tmp = [];
                    if (currentValue && currentValue.length) {
                      currentValue.forEach(v => {
                        tmp.push(v.name);
                      });
                      return tmp.join(",");
                    }
                  })();
                };
                __composite["2"]["title"] = "\u5c0f\u8282";
                __composite["3"]["title"] = "\u6807\u9898";
                __composite["4"]["title"] = "\u64cd\u4f5c";
                return __composite;
              })(),
              hideSearch: false,
              onRowSelectionChanged: async (...eventArgs: any) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "selectedRowKey",
                  ["table", "selectedRowKey"],
                  RichTable_Helpers
                ).apply(null, eventArgs);
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "selectedRow",
                  ["table", "selectedRow"],
                  RichTable_Helpers
                ).apply(null, eventArgs);
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "selectedRows",
                  ["table", "selectedRows"],
                  RichTable_Helpers
                ).apply(null, eventArgs);
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "selectedRowKeys",
                  ["table", "selectedRowKeys"],
                  RichTable_Helpers
                ).apply(null, eventArgs);
              },
              pagination: true,
              scopeClassName: sty["table__instance"],
              selectedRowKey: generateStateValueProp($state, [
                "table",
                "selectedRowKey"
              ]),
              selectedRowKeys: generateStateValueProp($state, [
                "table",
                "selectedRowKeys"
              ]),
              themeResetClassName: classNames(
                projectcss.root_reset,
                projectcss.root_reset_tags,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "selectedRowKey",
                  plasmicStateName: "table.selectedRowKey"
                },
                {
                  name: "selectedRow",
                  plasmicStateName: "table.selectedRow"
                },
                {
                  name: "selectedRows",
                  plasmicStateName: "table.selectedRows"
                },
                {
                  name: "selectedRowKeys",
                  plasmicStateName: "table.selectedRowKeys"
                }
              ],
              [],
              RichTable_Helpers ?? {},
              child$Props
            );

            return (
              <RichTable
                data-plasmic-name={"table"}
                data-plasmic-override={overrides.table}
                {...child$Props}
              />
            );
          })()}
          <AntdTabs
            data-plasmic-name={"tabs"}
            data-plasmic-override={overrides.tabs}
            activeKey={generateStateValueProp($state, ["tabs", "activeKey"])}
            animateTabBar={false}
            animateTabContent={false}
            animated={false}
            className={classNames("__wab_instance", sty.tabs)}
            destroyInactiveTabPane={false}
            items={
              <React.Fragment>
                <AntdTabItem
                  className={classNames("__wab_instance", sty.tabItem___40Utz)}
                  key={"1"}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___88ZQ5
                      )}
                    >
                      {"First Item"}
                    </div>
                  }
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__bXvir)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__m87Zs)}
                    >
                      <PlasmicImg__
                        data-plasmic-name={"img"}
                        data-plasmic-override={overrides.img}
                        alt={""}
                        className={classNames(sty.img)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zqci1
                        )}
                      >
                        {"First Children"}
                      </div>
                    </div>
                  </div>
                </AntdTabItem>
                <AntdTabItem
                  className={classNames("__wab_instance", sty.tabItem__umJly)}
                  key={"2"}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oveve
                      )}
                    >
                      {"Second Item"}
                    </div>
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lcvMn
                    )}
                  >
                    {"Second Children"}
                  </div>
                </AntdTabItem>
              </React.Fragment>
            }
            onChange={generateStateOnChangeProp($state, ["tabs", "activeKey"])}
            size={"large"}
            sticky={false}
            tabBarBackground={"#FFF"}
            tabsDropdownScopeClassName={sty["tabs__tabsDropdown"]}
            tabsScopeClassName={sty["tabs__tabs"]}
            type={"line"}
          />

          <AntdDrawer
            data-plasmic-name={"drawer"}
            data-plasmic-override={overrides.drawer}
            className={classNames("__wab_instance", sty.drawer)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            drawerScopeClassName={sty["drawer__drawer"]}
            onOpenChange={generateStateOnChangeProp($state, ["drawer", "open"])}
            open={generateStateValueProp($state, ["drawer", "open"])}
            title={"Drawer title"}
          >
            <div className={classNames(projectcss.all, sty.freeBox__ctNuk)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uVpGg
                )}
              >
                {"Drawer content"}
              </div>
            </div>
          </AntdDrawer>
          <AntdDrawer
            data-plasmic-name={"drawer2"}
            data-plasmic-override={overrides.drawer2}
            className={classNames("__wab_instance", sty.drawer2)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            drawerScopeClassName={sty["drawer2__drawer"]}
            onOpenChange={generateStateOnChangeProp($state, [
              "drawer2",
              "open"
            ])}
            open={generateStateValueProp($state, ["drawer2", "open"])}
            title={"Drawer title"}
          >
            <div className={classNames(projectcss.all, sty.freeBox__iJ4)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lmXfG
                )}
              >
                {"Drawer content"}
              </div>
            </div>
          </AntdDrawer>
          {(() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.pagination),
              current: generateStateValueProp($state, [
                "pagination",
                "currentPage"
              ]),
              defaultCurrent: 0,
              defaultPageSize: 10,
              disabled: false,
              hideOnSinglePage: false,
              onChange: async (...eventArgs: any) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "currentPage",
                  ["pagination", "currentPage"],
                  AntdPagination_Helpers
                ).apply(null, eventArgs);
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "startIndex",
                  ["pagination", "startIndex"],
                  AntdPagination_Helpers
                ).apply(null, eventArgs);
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "endIndex",
                  ["pagination", "endIndex"],
                  AntdPagination_Helpers
                ).apply(null, eventArgs);
                (async (page, pageSize) => {
                  const $steps = {};
                }).apply(null, eventArgs);
              },
              onShowSizeChange: generateStateOnChangePropForCodeComponents(
                $state,
                "pageSize",
                ["pagination", "pageSize"],
                AntdPagination_Helpers
              ),
              pageSize: generateStateValueProp($state, [
                "pagination",
                "pageSize"
              ]),
              pageSizeOptions: [],
              paginatedUrl: (pageNo, pageSize) => {
                return `/new-page-2`;
              },

              showLessItems: false,
              showQuickJumper: false,
              showSizeChanger: false,
              simple: false,
              size: "default",
              total: (() => {
                try {
                  return $queries.query.data.response.results[0].count;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return 0;
                  }
                  throw e;
                }
              })()
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "currentPage",
                  plasmicStateName: "pagination.currentPage"
                },
                {
                  name: "pageSize",
                  plasmicStateName: "pagination.pageSize"
                },
                {
                  name: "startIndex",
                  plasmicStateName: "pagination.startIndex"
                },
                {
                  name: "endIndex",
                  plasmicStateName: "pagination.endIndex"
                }
              ],
              [],
              AntdPagination_Helpers ?? {},
              child$Props
            );

            return (
              <AntdPagination
                data-plasmic-name={"pagination"}
                data-plasmic-override={overrides.pagination}
                {...child$Props}
              />
            );
          })()}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "table", "tabs", "img", "drawer", "drawer2", "pagination"],
  table: ["table"],
  tabs: ["tabs", "img"],
  img: ["img"],
  drawer: ["drawer"],
  drawer2: ["drawer2"],
  pagination: ["pagination"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  table: typeof RichTable;
  tabs: typeof AntdTabs;
  img: typeof PlasmicImg__;
  drawer: typeof AntdDrawer;
  drawer2: typeof AntdDrawer;
  pagination: typeof AntdPagination;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewPage__VariantsArgs;
    args?: PlasmicNewPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNewPage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewPage__ArgProps,
          internalVariantPropNames: PlasmicNewPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewPage";
  } else {
    func.displayName = `PlasmicNewPage.${nodeName}`;
  }
  return func;
}

export const PlasmicNewPage = Object.assign(
  // Top-level PlasmicNewPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    table: makeNodeComponent("table"),
    tabs: makeNodeComponent("tabs"),
    img: makeNodeComponent("img"),
    drawer: makeNodeComponent("drawer"),
    drawer2: makeNodeComponent("drawer2"),
    pagination: makeNodeComponent("pagination"),

    // Metadata about props expected for PlasmicNewPage
    internalVariantProps: PlasmicNewPage__VariantProps,
    internalArgProps: PlasmicNewPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNewPage;
/* prettier-ignore-end */
